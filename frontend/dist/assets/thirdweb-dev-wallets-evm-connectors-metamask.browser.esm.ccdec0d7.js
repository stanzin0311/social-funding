var P=Object.defineProperty;var U=(s,o,t)=>o in s?P(s,o,{enumerable:!0,configurable:!0,writable:!0,value:t}):s[o]=t;var d=(s,o,t)=>(U(s,typeof o!="symbol"?o+"":o,t),t),v=(s,o,t)=>{if(!o.has(s))throw TypeError("Cannot "+t)};var p=(s,o,t)=>(v(s,o,"read from private field"),t?t.call(s):o.get(s)),C=(s,o,t)=>{if(o.has(s))throw TypeError("Cannot add the same private member more than once");o instanceof WeakSet?o.add(s):o.set(s,t)},I=(s,o,t,n)=>(v(s,o,"write to private field"),n?n.call(s,t):o.set(s,t),t);import{W as S,a as u,U as l,R as E,C as D,A as W,S as q}from"./errors-9fc48fb5.browser.esm.28f782e3.js";import{g as f,W as R,h as j,c as k,w as T,e as _}from"./index.fcc556b6.js";import{n as A}from"./normalizeChainId-e4cc0175.browser.esm.042707b7.js";function K(s){var t,n,i;if(!s)return"Injected";const o=e=>{if(e.isAvalanche)return"Core Wallet";if(e.isBitKeep)return"BitKeep";if(e.isBraveWallet)return"Brave Wallet";if(e.isCoinbaseWallet)return"Coinbase Wallet";if(e.isExodus)return"Exodus";if(e.isFrame)return"Frame";if(e.isKuCoinWallet)return"KuCoin Wallet";if(e.isMathWallet)return"MathWallet";if(e.isOneInchIOSWallet||e.isOneInchAndroidWallet)return"1inch Wallet";if(e.isOpera)return"Opera";if(e.isPortal)return"Ripio Portal";if(e.isTally)return"Tally";if(e.isTokenPocket)return"TokenPocket";if(e.isTokenary)return"Tokenary";if(e.isTrust||e.isTrustWallet)return"Trust Wallet";if(e.isMetaMask)return"MetaMask"};if((t=s.providers)!=null&&t.length){const e=new Set;let c=1;for(const a of s.providers){let h=o(a);h||(h=`Unknown Wallet #${c}`,c+=1),e.add(h)}const r=[...e];return r.length?r:(n=r[0])!=null?n:"Injected"}return(i=o(s))!=null?i:"Injected"}var m;class M extends S{constructor(t){const i={...{shimDisconnect:!0,getProvider:()=>{if(k(globalThis.window))return globalThis.window.ethereum}},...t.options};super({chains:t.chains,options:i});C(this,m,void 0);d(this,"shimDisconnectKey","injected.shimDisconnect");d(this,"onAccountsChanged",async t=>{t.length===0?this.emit("disconnect"):this.emit("change",{account:f(t[0])})});d(this,"onChainChanged",t=>{const n=A(t),i=this.isChainUnsupported(n);this.emit("change",{chain:{id:n,unsupported:i}})});d(this,"onDisconnect",async t=>{t.code===1013&&await this.getProvider()&&await this.getAccount()||(this.emit("disconnect"),this.options.shimDisconnect&&await this.connectorStorage.removeItem(this.shimDisconnectKey))});const e=i.getProvider();if(typeof i.name=="string")this.name=i.name;else if(e){const c=K(e);i.name?this.name=i.name(c):typeof c=="string"?this.name=c:this.name=c[0]}else this.name="Injected";this.id="injected",this.ready=!!e,this.connectorStorage=t.connectorStorage}async connect(){let t=arguments.length>0&&arguments[0]!==void 0?arguments[0]:{};try{const n=await this.getProvider();if(!n)throw new u;this.setupListeners(),this.emit("message",{type:"connecting"});const i=await n.request({method:"eth_requestAccounts"}),e=f(i[0]);let c=await this.getChainId(),r=this.isChainUnsupported(c);if(t.chainId&&c!==t.chainId)try{await this.switchChain(t.chainId),c=t.chainId,r=this.isChainUnsupported(t.chainId)}catch(h){console.error(`Could not switch to chain id: ${t.chainId}`,h)}this.options.shimDisconnect&&await this.connectorStorage.setItem(this.shimDisconnectKey,"true");const a={account:e,chain:{id:c,unsupported:r},provider:n};return this.emit("connect",a),a}catch(n){throw this.isUserRejectedRequestError(n)?new l(n):n.code===-32002?new E(n):n}}async disconnect(){const t=await this.getProvider();!(t!=null&&t.removeListener)||(t.removeListener("accountsChanged",this.onAccountsChanged),t.removeListener("chainChanged",this.onChainChanged),t.removeListener("disconnect",this.onDisconnect),this.options.shimDisconnect&&await this.connectorStorage.removeItem(this.shimDisconnectKey))}async getAccount(){const t=await this.getProvider();if(!t)throw new u;const n=await t.request({method:"eth_accounts"});return f(n[0])}async getChainId(){const t=await this.getProvider();if(!t)throw new u;return t.request({method:"eth_chainId"}).then(A)}async getProvider(){const t=this.options.getProvider();return t&&I(this,m,t),p(this,m)}async getSigner(){let{chainId:t}=arguments.length>0&&arguments[0]!==void 0?arguments[0]:{};const[n,i]=await Promise.all([this.getProvider(),this.getAccount()]);return new R(n,t).getSigner(i)}async isAuthorized(){try{if(this.options.shimDisconnect&&!Boolean(await this.connectorStorage.getItem(this.shimDisconnectKey)))return!1;if(!await this.getProvider())throw new u;return!!await this.getAccount()}catch{return!1}}async switchChain(t){var e,c;const n=await this.getProvider();if(!n)throw new u;const i=j(t);try{await n.request({method:"wallet_switchEthereumChain",params:[{chainId:i}]});const r=this.chains.find(a=>a.chainId===t);return r||{chainId:t,name:`Chain ${i}`,slug:`${i}`,nativeCurrency:{name:"Ether",decimals:18,symbol:"ETH"},rpc:[""],chain:"",shortName:"",testnet:!0}}catch(r){const a=this.chains.find(h=>h.chainId===t);if(!a)throw new D({chainId:t,connectorId:this.id});if(r.code===4902||((c=(e=r==null?void 0:r.data)==null?void 0:e.originalError)==null?void 0:c.code)===4902)try{return await n.request({method:"wallet_addEthereumChain",params:[{chainId:i,chainName:a.name,nativeCurrency:a.nativeCurrency,rpcUrls:a.rpc,blockExplorerUrls:this.getBlockExplorerUrls(a)}]}),a}catch(h){throw this.isUserRejectedRequestError(h)?new l(r):new W}throw this.isUserRejectedRequestError(r)?new l(r):new q(r)}}async setupListeners(){const t=await this.getProvider();t.on&&(t.on("accountsChanged",this.onAccountsChanged),t.on("chainChanged",this.onChainChanged),t.on("disconnect",this.onDisconnect))}isUserRejectedRequestError(t){return t.code===4001}}m=new WeakMap;var w;class N extends M{constructor(t){const i={...{name:"MetaMask",shimDisconnect:!0,shimChainChangedDisconnect:!0,getProvider:_},...t.options};super({chains:t.chains,options:i,connectorStorage:t.connectorStorage});d(this,"id",T.metamask);C(this,w,void 0);I(this,w,i.UNSTABLE_shimOnConnectSelectAccount)}async connect(){var n,i;let t=arguments.length>0&&arguments[0]!==void 0?arguments[0]:{};try{const e=await this.getProvider();if(!e)throw new u;this.setupListeners(),this.emit("message",{type:"connecting"});let c=null;if(p(this,w)&&((n=this.options)==null?void 0:n.shimDisconnect)&&!Boolean(this.connectorStorage.getItem(this.shimDisconnectKey))&&(c=await this.getAccount().catch(()=>null),!!c))try{await e.request({method:"wallet_requestPermissions",params:[{eth_accounts:{}}]})}catch(y){if(this.isUserRejectedRequestError(y))throw new l(y)}if(!c){const g=await e.request({method:"eth_requestAccounts"});c=f(g[0])}let r=await this.getChainId(),a=this.isChainUnsupported(r);if(t.chainId&&r!==t.chainId)try{await this.switchChain(t.chainId),r=t.chainId,a=this.isChainUnsupported(t.chainId)}catch(g){console.error(`Could not switch to chain id : ${t.chainId}`,g)}(i=this.options)!=null&&i.shimDisconnect&&await this.connectorStorage.setItem(this.shimDisconnectKey,"true");const h={chain:{id:r,unsupported:a},provider:e,account:c};return this.emit("connect",h),h}catch(e){throw this.isUserRejectedRequestError(e)?new l(e):e.code===-32002?new E(e):e}}async switchAccount(){await(await this.getProvider()).request({method:"wallet_requestPermissions",params:[{eth_accounts:{}}]})}}w=new WeakMap;export{N as MetaMaskConnector};
